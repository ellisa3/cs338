Angela Ellis in collaboration with Kai Johnson


>> id_rsa_homework

-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAsKT+heQ4P0m5FOMthSWcdROqz9G6BewLsdCmHaDRCaC3Rr1+
0wATe/ZuagfkF7ULX3+RODDYP5hlWzDFQLfXloNCS4xaRLW9CRdqvevMuAQzFg0l
zMpsvk1GZas+uksrRwowXCscTflDGXRjQTXYzD0lN/9z3NNjCEeSaMs0dk+r6DyO
1C08mrGLt0f4KXuU1kDdOTx/lr4ZzFaNGlclk2ljEwsaIDyJZmFiQMHoi1fVYODp
Wh9yy8sTQ7uj8HNn1DYIFUTSSv/9v9HWkpF5XkBoX0uhw3U6y55bkgQKV101wfkm
JCzKDuIJ7OefjemBSI+izU3N85H64MfhVGd6iQIDAQABAoIBACFpU+snW6w82ZEl
1zpT/t/2NFzSooj0ONINUR5RiLh1ebUbqp1makkMN54+l9oUGG6bxnAGbSC6RpGV
C/pNy61gbm2zwm80oOjTURFTRImZ4b/OBNRThXYJT8NzPI4oIatyNet5DAWDnDl4
Vj3DXZpkBmItI1ElepnaT8sahHXMEzMUDBGk9P0T55yjriIsGCDrOAlERkJNchDS
EqoCtejyi2J2WnmDamE1mAWdF1yfxCqQ8OgnkiJ+C+zZvz6ej3frkF/aP8JYSfva
h9O9atuLxmPiBPW/vUvQhnadynGogQCdY71AticnQOdgmNXvYJ4byQJlVjppI0O4
Z788/AECgYEA6v7x22oBzQwYqVkFsxsJZePrqdaGFEa20UWiK9esCgB93NS7h2NQ
v7w/sC5ESCreeVJbK5hrrbCIxRbFy4/lKz1Hq8/vihuAs2cR4YRvCK8eJsjLKsxc
oZMWXx0JQ8Vu+nbL35Gzr0ZCIW9EuqXRMq+jUKuzeLbHGgns14GbGCECgYEAwG7i
IzrlqSzFj4B5EFCRhtHhsi2BzuI/3Jghwzsfa6Cfmfc7kBjoEpgKikWaBfLKIhnR
FwhSVCPDiS4VEZ3QHTrtMqYYPkKpP4WtdbXiXaoffXw5Z7AKFFCdasFi1sW/QXdS
hjUzOyslZn7DBiUjKJE7ehFyLET71G4y8YtT9WkCgYBTLlcyEX39tNBt8WMBGQrk
lB7xCUyAlN9ViE51MmxlRfNHXc3biJ4moF3y4Q2ude42B57Z+aPz4U8oZH0zJwY5
ngFmob3qpv2Rg2Ri7VvYORR1KhIwXhJT5xq+JCsJYDN+WNqlko+F9VqnNxme797z
EBTBE2X9zsT/RJAfYHMjwQKBgGvJcEd1hRCWsG5p8uXtiyYuR7JLBSvB1S2V1UuK
wVXC2cMfFbDoEo3ftf+vbs+oKAqj1VeGZL8WbT9YnZqJf/nveM9m86tkIXMgSIHn
iE0YrpzWST1IAM1SPmp+ugM9LpzX3lSoVfLtfvyDQnAduyzM9LiyLvaXCUv7EfP0
K+oJAoGBAJkIWmi0rBGXs1ci3/p9joe9Lw12FpRqWA8jtnCRkBgAfi+GoJoGYl0q
NdxOgdkImSW/dZFxOrQKWouOvT0up7XnayOYFgmv+YUaw+/4k02ZV8Cu425w7Sr8
XKAY1VZKKWPqDdw0bXXJBwSwnFIc/ytsOh4DQmLWmppwzBHbP9OK
-----END RSA PRIVATE KEY-----


>> id_rsa_homework.pub

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwpP6F5Dg/SbkU4y2FJZx1E6rP0boF7Aux0KYdoNE
JoLdGvX7TABN79m5qB+QXtQtff5E4MNg/mGVbMMVAt9eWg0JLjFpEtb0JF2q968y4BDMWDSXMymy+TU
Zlqz66SytHCjBcKxxN+UMZdGNBNdjMPSU3/3Pc02MIR5JoyzR2T6voPI7ULTyasYu3R/gpe5TWQN05PH
+WvhnMVo0aVyWTaWMTCxogPIlmYWJAweiLV9Vg4OlaH3LLyxNDu6Pwc2fUNggVRNJK//2/0daSkXleQGh
fS6HDdTrLnluSBApXXTXB+SYkLMoO4gns55+N6YFIj6LNTc3zkfrgx+FUZ3qJ
acellis@DESKTOP-KTKT4D7

>> Private Key

+ Expected Items
  -version
  -modulus
  -publicExponent
  -privateExponent
  -prime1
  -prime2
  -exponent1
  -exponent2
  -coefficient
  -otherPrimeInfos

+ Decoding Private Key File

  I pasted the contents of id_rsa_homework into the textbox on Lapo Luchini's
  ASN.1 decoder. This website automatically provides a clear structure denoting
  what text in the private key corresponds to which field. For example, hovering
  over the second INTEGER line, the hexadecimals denoting the modulus are
  highlighted.

+ Integers in the Private Key
  + 1 of 9
    - Version number
    - 0
    - bytes : 02 01 00
      offset : 4
      type : integer
      length : 1
      value : 0

    + 2 of 9
      - Modulus, n (product of prime1 and prime2)
      - 22299303361488285644425115594637500277493574977075068206822888021171241692895133
        18186423149725125441667116799222818976643551172005797130478171691236542327530514
        37043714933494661895753214343862098792439114396040553280184660041653207718843855
        25307571821505384863716501785367530935451199543991198672837836112909958736408108
        97990221228766108466861895906304835310399961822603745222766125125668630866606803
        49146870030708690073440866788826824900926657217928686483121580259899451633300233
        75805403397003372302997910518948553317769332814681857605098263081313963410826115
        216022221624061790041309198926954221047046738503038106249
      - offset : 7
        type : integer
        length : 0x820101
        value : given above

      + 3 of 9
        - Public exponent, e
        - 65537
        - bytes : 02 03 01 00 01
          offset : 268
          type : integer
          length : 3
          value : 65537

        + 4 of 9
          - Private exponent, d
          - 42178031412638477325525082458935632305386324582422531622103013551190733787803541
            65164548478568237022583514631912669794844661844177161180616661776487812791563278
            16896392925461926676496764424144311859113975624962799405094686341506807281808509
            65365009124522140282684553173232817107260489425410821177120987603281829779578637
            84379001915030442290368460010181942663584864577013370940692555121607214605035663
            71092395742841035012304805958338934278865950536773498675812671260190643666318979
            38754123261943459920369711629460741907503767562300073333705094520980596539142254
            67971654445673980738117666291632621024010306363842165761
          - offset : 273
            type : integer
            length : 0x820100
            value : given above
        + 5 of 9
          - Prime1, p
          - 16501971738474203831218188756214075638925489400663509073141158535939769048011836
            56251206211348344741097830246635737653333551664689524545638705677479735719512567
            60708606469804430508363578228554195574516906581529451813616928731384606336467624
            421806609481402958408307935194258934161196063366005373252751840712737
          - offset : 533
            type : integer
            length : 0x8181
            value : given above
        + 6 of 9
          - Prime2, q
          - 13513114502249239385747062104621422286638065402569258093668669109804615599338704
            83357259710778292590857704412205036062212199500838749338101258143056977865939497
            75117873322083700411520856665749437461921209698132363385487439638756220945816484
            754936051371269141716074586125014867979344739912475477660632842761577
          - offset : 665
            type : integer
            length 0x8181
            value : given above
        + 7 of 9
          - Exponent1, d mod (p-1)
          - 58411697268584857481514189353594782591786853703494527286682117844382678849471075
            05335227686781345088116249761425735398634623421497412211380852694840305357470214
            28340975767356329849248254840166658366669697862019961727312130965814745532046927
            89371953655943754354882394382355291738581660405032159676477977338817
          - offset : 797
            type : integer
            length : 0x8180
            value : given above
        + 8 of 9
          -Exponent2, d mod (q-1)
          - 75690513795728722494375528754527639458656444888065504273995326968249635173432490
            91896432049523222411431019312393711767054889829606123175055172677034133463657632
            01672644732040001587884573194225567204734071869133608117225143308223158627947165
            55059699250620549052525779057069606308707540129195146397365931076105
          - offset : 928
            type : integer
            length : 0x8180
            value : given above
        + 9 of 9
          - Coefficient
          - 10746316699982071607130513657733017117921139536736015206426005713035548723255555
            26885539099615228889206014459817703474292938945592108332950938244668364993164393
            20628858185732020033030362971334277344473395631585498280067574903068135301043828
            382086455665158540007926216366725574672757667353680708141721153688458
          - offset : 1059
            type : integer
            length : 0x8181
            value : given above

>> Public Key

>> Private Key

+ Expected Items
  -modulus
  -publicExponent


+ Decoding Private Key File

  I typed "ssh -keygen -e -f id_rsa_homework.pub -m PEM" into the command line.
  Then I copied the output into lapo.it, and analyzed as I did the private key.


+ Integers in the Public Key
  + 1 of 2
    - Modulus
    - 22299303361488285644425115594637500277493574977075068206822888021171241692895133
      18186423149725125441667116799222818976643551172005797130478171691236542327530514
      37043714933494661895753214343862098792439114396040553280184660041653207718843855
      25307571821505384863716501785367530935451199543991198672837836112909958736408108
      97990221228766108466861895906304835310399961822603745222766125125668630866606803
      49146870030708690073440866788826824900926657217928686483121580259899451633300233
      75805403397003372302997910518948553317769332814681857605098263081313963410826115
      216022221624061790041309198926954221047046738503038106249
    - offset : 4
      type : integer
      length : 0x820101
  + 2 of 2
      - PublicExponent
      - 65537
      - offset : 265
        type : integer
        length : 3

>> Sanity Check
  see rsa.py for code that verifies the relationship between the various RSA
  numbers
  see rsa.jpg for the printed results of rsa.py
