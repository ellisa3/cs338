import math

q = 135131145022492393857470621046214222866380654025692580936686691098046155993387048335725971077829259085770441220503606221219950083874933810125814305697786593949775117873322083700411520856665749437461921209698132363385487439638756220945816484754936051371269141716074586125014867979344739912475477660632842761577
p = 165019717384742038312181887562140756389254894006635090731411585359397690480118365625120621134834474109783024663573765333355166468952454563870567747973571951256760708606469804430508363578228554195574516906581529451813616928731384606336467624421806609481402958408307935194258934161196063366005373252751840712737
n = p * q
print("p * q = ", n, "\n")

# source: #https://stackoverflow.com/questions/51716916/
#         built-in-module-to-calculate-the-least-common-multiple
def lcm(a,b):
    return a * b // math.gcd(a,b)

lambda_n = lcm(p-1, q-1)
print("lambda_n: ", lambda_n, "\n")

d = 4217803141263847732552508245893563230538632458242253162210301355119073378780354165164548478568237022583514631912669794844661844177161180616661776487812791563278168963929254619266764967644241443118591139756249627994050946863415068072818085096536500912452214028268455317323281710726048942541082117712098760328182977957863784379001915030442290368460010181942663584864577013370940692555121607214605035663710923957428410350123048059583389342788659505367734986758126712601906436663189793875412326194345992036971162946074190750376756230007333370509452098059653914225467971654445673980738117666291632621024010306363842165761
e = 65537

gc_divisor = math.gcd(e, lambda_n)

print("gcd(e, lambda_n) = ", gc_divisor, "\n")

wish = (e*d) % lambda_n
print("(e*d) % lambda_n = ", wish, "\n")


#results
n = 22299303361488285644425115594637500277493574977075068206822888021171241692895133181864231497251254416671167992228189766435511720057971304781716912365423275305143704371493349466189575321434386209879243911439604055328018466004165320771884385525307571821505384863716501785367530935451199543991198672837836112909958736408108979902212287661084668618959063048353103999618226037452227661251256686308666068034914687003070869007344086678882682490092665721792868648312158025989945163330023375805403397003372302997910518948553317769332814681857605098263081313963410826115216022221624061790041309198926954221047046738503038106249

lambda_n = 2787412920186035705553139449329687534686696872134383525852861002646405211611891647733028937156406802083895999028523720804438965007246413097714614045677909413142963046436668683273696915179298276234905488929950506916002308250520665096485548190663446477688173107964562723170941366931399942998899834104729514113707323193212718183755329394059539204962928437540097040993765970124347976847218909043477434477781369225939675390408339390538445742158159668474560824330099935097926167106278935959310439071059749920609260104034206994266713789185933033872599650598333520657817990262155192558845938382298268867820774478139794328992

ex1 = 58411697268584857481514189353594782591786853703494527286682117844382678849471075053352276867813450881162497614257353986346234214974122113808526948403053574702142834097576735632984924825484016665836666969786201996172731213096581474553204692789371953655943754354882394382355291738581660405032159676477977338817
ex2 = 75690513795728722494375528754527639458656444888065504273995326968249635173432490918964320495232224114310193123937117670548898296061231750551726770341334636576320167264473204000158788457319422556720473407186913360811722514330822315862794716555059699250620549052525779057069606308707540129195146397365931076105
